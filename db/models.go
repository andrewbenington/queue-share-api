// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"time"

	uuid "github.com/google/uuid"
)

type AlbumData struct {
	ID                   string     `json:"id"`
	URI                  string     `json:"uri"`
	Name                 string     `json:"name"`
	ArtistID             string     `json:"artist_id"`
	ArtistURI            string     `json:"artist_uri"`
	ArtistName           string     `json:"artist_name"`
	AlbumGroup           *string    `json:"album_group"`
	AlbumType            *string    `json:"album_type"`
	ImageUrl             *string    `json:"image_url"`
	ReleaseDate          *time.Time `json:"release_date"`
	ReleaseDatePrecision *string    `json:"release_date_precision"`
	Genres               []string   `json:"genres"`
	Popularity           *int32     `json:"popularity"`
	Upc                  *string    `json:"upc"`
	SpotifyTrackIds      []string   `json:"spotify_track_ids"`
	TrackIsrcs           []string   `json:"track_isrcs"`
}

type ArtistData struct {
	ID            string   `json:"id"`
	URI           string   `json:"uri"`
	Name          string   `json:"name"`
	ImageUrl      *string  `json:"image_url"`
	Genres        []string `json:"genres"`
	Popularity    *int32   `json:"popularity"`
	FollowerCount *int32   `json:"follower_count"`
}

type Room struct {
	ID                uuid.UUID  `json:"id"`
	Name              string     `json:"name"`
	Code              string     `json:"code"`
	Created           time.Time  `json:"created"`
	HostID            uuid.UUID  `json:"host_id"`
	PasswordProtected bool       `json:"password_protected"`
	Updated           *time.Time `json:"updated"`
	IsOpen            bool       `json:"is_open"`
}

type RoomGuest struct {
	ID     uuid.UUID `json:"id"`
	RoomID uuid.UUID `json:"room_id"`
	Name   string    `json:"name"`
}

type RoomMember struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	RoomID      uuid.UUID `json:"room_id"`
	IsModerator bool      `json:"is_moderator"`
}

type RoomPassword struct {
	ID                uuid.UUID `json:"id"`
	RoomID            uuid.UUID `json:"room_id"`
	EncryptedPassword *string   `json:"encrypted_password"`
}

type RoomQueueTrack struct {
	ID        uuid.UUID  `json:"id"`
	TrackID   string     `json:"track_id"`
	GuestID   *uuid.UUID `json:"guest_id"`
	RoomID    uuid.UUID  `json:"room_id"`
	Timestamp time.Time  `json:"timestamp"`
	UserID    *uuid.UUID `json:"user_id"`
	Played    bool       `json:"played"`
}

type SchemaMigration struct {
	Version int64 `json:"version"`
	Dirty   bool  `json:"dirty"`
}

type SpotifyHistory struct {
	UserID           uuid.UUID  `json:"user_id"`
	Timestamp        time.Time  `json:"timestamp"`
	Platform         string     `json:"platform"`
	MsPlayed         int32      `json:"ms_played"`
	ConnCountry      string     `json:"conn_country"`
	IpAddr           *string    `json:"ip_addr"`
	UserAgent        *string    `json:"user_agent"`
	TrackName        string     `json:"track_name"`
	ArtistName       string     `json:"artist_name"`
	AlbumName        string     `json:"album_name"`
	SpotifyTrackUri  string     `json:"spotify_track_uri"`
	ReasonStart      *string    `json:"reason_start"`
	ReasonEnd        *string    `json:"reason_end"`
	Shuffle          bool       `json:"shuffle"`
	Skipped          *bool      `json:"skipped"`
	Offline          bool       `json:"offline"`
	OfflineTimestamp *time.Time `json:"offline_timestamp"`
	IncognitoMode    bool       `json:"incognito_mode"`
	SpotifyArtistUri *string    `json:"spotify_artist_uri"`
	SpotifyAlbumUri  *string    `json:"spotify_album_uri"`
	FromHistory      bool       `json:"from_history"`
	Isrc             *string    `json:"isrc"`
}

type SpotifyPermissionsVersion struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

type SpotifyToken struct {
	ID                    uuid.UUID `json:"id"`
	UserID                uuid.UUID `json:"user_id"`
	EncryptedAccessToken  []byte    `json:"encrypted_access_token"`
	AccessTokenExpiry     time.Time `json:"access_token_expiry"`
	EncryptedRefreshToken []byte    `json:"encrypted_refresh_token"`
	PermissionsVersion    int64     `json:"permissions_version"`
}

type TrackData struct {
	ID           string           `json:"id"`
	URI          string           `json:"uri"`
	Name         string           `json:"name"`
	AlbumID      string           `json:"album_id"`
	AlbumURI     string           `json:"album_uri"`
	AlbumName    string           `json:"album_name"`
	ArtistID     string           `json:"artist_id"`
	ArtistURI    string           `json:"artist_uri"`
	ArtistName   string           `json:"artist_name"`
	ImageUrl     *string          `json:"image_url"`
	OtherArtists TrackArtists     `json:"other_artists"`
	DurationMs   int32            `json:"duration_ms"`
	Popularity   int32            `json:"popularity"`
	Explicit     bool             `json:"explicit"`
	PreviewUrl   string           `json:"preview_url"`
	DiscNumber   int32            `json:"disc_number"`
	TrackNumber  int32            `json:"track_number"`
	Type         string           `json:"type"`
	ExternalIds  TrackExternalIDs `json:"external_ids"`
	Isrc         *string          `json:"isrc"`
}

type User struct {
	ID              uuid.UUID `json:"id"`
	Username        string    `json:"username"`
	DisplayName     string    `json:"display_name"`
	SpotifyAccount  *string   `json:"spotify_account"`
	SpotifyName     *string   `json:"spotify_name"`
	SpotifyImageUrl *string   `json:"spotify_image_url"`
	Created         time.Time `json:"created"`
}

type UserFriend struct {
	UserID         uuid.UUID `json:"user_id"`
	FriendID       uuid.UUID `json:"friend_id"`
	AddedTimestamp time.Time `json:"added_timestamp"`
}

type UserFriendRequest struct {
	UserID           uuid.UUID `json:"user_id"`
	FriendID         uuid.UUID `json:"friend_id"`
	RequestTimestamp time.Time `json:"request_timestamp"`
}

type UserPassword struct {
	ID                uuid.UUID  `json:"id"`
	UserID            *uuid.UUID `json:"user_id"`
	EncryptedPassword string     `json:"encrypted_password"`
}
