// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const allRooms = `-- name: AllRooms :many
SELECT id, name, code, created
FROM rooms
`

type AllRoomsRow struct {
	ID      uuid.UUID
	Name    string
	Code    string
	Created sql.NullTime
}

func (q *Queries) AllRooms(ctx context.Context) ([]AllRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, allRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllRoomsRow
	for rows.Next() {
		var i AllRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRoomByCode = `-- name: FindRoomByCode :one
SELECT id, name, code, created
FROM rooms
WHERE (code = $1)
`

type FindRoomByCodeRow struct {
	ID      uuid.UUID
	Name    string
	Code    string
	Created sql.NullTime
}

func (q *Queries) FindRoomByCode(ctx context.Context, code string) (FindRoomByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, findRoomByCode, code)
	var i FindRoomByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const getRoomAuthByCode = `-- name: GetRoomAuthByCode :one
SELECT encrypted_access_token, access_token_expiry, encrypted_refresh_token
FROM rooms
WHERE (code = $1)
`

type GetRoomAuthByCodeRow struct {
	EncryptedAccessToken  string
	AccessTokenExpiry     time.Time
	EncryptedRefreshToken string
}

func (q *Queries) GetRoomAuthByCode(ctx context.Context, code string) (GetRoomAuthByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getRoomAuthByCode, code)
	var i GetRoomAuthByCodeRow
	err := row.Scan(&i.EncryptedAccessToken, &i.AccessTokenExpiry, &i.EncryptedRefreshToken)
	return i, err
}

const getRoomIDByCode = `-- name: GetRoomIDByCode :one
SELECT id
FROM rooms
WHERE (code = $1)
`

func (q *Queries) GetRoomIDByCode(ctx context.Context, code string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRoomIDByCode, code)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertRoom = `-- name: InsertRoom :one
INSERT INTO rooms (name, encrypted_access_token, access_token_expiry, encrypted_refresh_token)
VALUES ($1, $2, $3, $4)
RETURNING id, name, code, created
`

type InsertRoomParams struct {
	Name                  string
	EncryptedAccessToken  string
	AccessTokenExpiry     time.Time
	EncryptedRefreshToken string
}

type InsertRoomRow struct {
	ID      uuid.UUID
	Name    string
	Code    string
	Created sql.NullTime
}

func (q *Queries) InsertRoom(ctx context.Context, arg InsertRoomParams) (InsertRoomRow, error) {
	row := q.db.QueryRowContext(ctx, insertRoom,
		arg.Name,
		arg.EncryptedAccessToken,
		arg.AccessTokenExpiry,
		arg.EncryptedRefreshToken,
	)
	var i InsertRoomRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Created,
	)
	return i, err
}
