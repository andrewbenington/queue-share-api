// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package gen

import (
	"context"
)

const allRooms = `-- name: AllRooms :many
SELECT id, name, code, created
FROM rooms
`

func (q *Queries) AllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, allRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRoomByCode = `-- name: FindRoomByCode :one
SELECT id, name, code, created
FROM rooms
WHERE (code = $1)
`

func (q *Queries) FindRoomByCode(ctx context.Context, code string) (Room, error) {
	row := q.db.QueryRowContext(ctx, findRoomByCode, code)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const insertRoom = `-- name: InsertRoom :one
INSERT INTO rooms (name)
VALUES ($1)
RETURNING id, name, code, created
`

func (q *Queries) InsertRoom(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRowContext(ctx, insertRoom, name)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Created,
	)
	return i, err
}
