// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package gen

import (
	"database/sql"
	"time"

	"github.com/google/uuid"
)

type Room struct {
	ID                uuid.UUID    `json:"id"`
	Name              string       `json:"name"`
	Code              string       `json:"code"`
	Created           time.Time    `json:"created"`
	HostID            uuid.UUID    `json:"host_id"`
	PasswordProtected bool         `json:"password_protected"`
	Updated           sql.NullTime `json:"updated"`
	IsOpen            bool         `json:"is_open"`
}

type RoomGuest struct {
	ID     uuid.UUID `json:"id"`
	RoomID uuid.UUID `json:"room_id"`
	Name   string    `json:"name"`
}

type RoomMember struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	RoomID      uuid.UUID `json:"room_id"`
	IsModerator bool      `json:"is_moderator"`
}

type RoomPassword struct {
	ID                uuid.UUID      `json:"id"`
	RoomID            uuid.UUID      `json:"room_id"`
	EncryptedPassword sql.NullString `json:"encrypted_password"`
}

type RoomQueueTrack struct {
	ID        uuid.UUID     `json:"id"`
	TrackID   string        `json:"track_id"`
	GuestID   uuid.NullUUID `json:"guest_id"`
	RoomID    uuid.UUID     `json:"room_id"`
	Timestamp time.Time     `json:"timestamp"`
	UserID    uuid.NullUUID `json:"user_id"`
	Played    bool          `json:"played"`
}

type SchemaMigration struct {
	Version int64 `json:"version"`
	Dirty   bool  `json:"dirty"`
}

type SpotifyHistory struct {
	UserID           uuid.UUID      `json:"user_id"`
	Timestamp        time.Time      `json:"timestamp"`
	Platform         string         `json:"platform"`
	MsPlayed         int32          `json:"ms_played"`
	ConnCountry      string         `json:"conn_country"`
	IpAddr           sql.NullString `json:"ip_addr"`
	UserAgent        sql.NullString `json:"user_agent"`
	TrackName        string         `json:"track_name"`
	ArtistName       string         `json:"artist_name"`
	AlbumName        string         `json:"album_name"`
	SpotifyTrackUri  string         `json:"spotify_track_uri"`
	ReasonStart      sql.NullString `json:"reason_start"`
	ReasonEnd        sql.NullString `json:"reason_end"`
	Shuffle          bool           `json:"shuffle"`
	Skipped          sql.NullBool   `json:"skipped"`
	Offline          bool           `json:"offline"`
	OfflineTimestamp sql.NullTime   `json:"offline_timestamp"`
	IncognitoMode    bool           `json:"incognito_mode"`
}

type SpotifyPermissionsVersion struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

type SpotifyToken struct {
	ID                    uuid.UUID `json:"id"`
	UserID                uuid.UUID `json:"user_id"`
	EncryptedAccessToken  []byte    `json:"encrypted_access_token"`
	AccessTokenExpiry     time.Time `json:"access_token_expiry"`
	EncryptedRefreshToken []byte    `json:"encrypted_refresh_token"`
	PermissionsVersion    int64     `json:"permissions_version"`
}

type User struct {
	ID              uuid.UUID      `json:"id"`
	Username        string         `json:"username"`
	DisplayName     string         `json:"display_name"`
	SpotifyAccount  sql.NullString `json:"spotify_account"`
	SpotifyName     sql.NullString `json:"spotify_name"`
	SpotifyImageUrl sql.NullString `json:"spotify_image_url"`
	Created         time.Time      `json:"created"`
}

type UserPassword struct {
	ID                uuid.UUID     `json:"id"`
	UserID            uuid.NullUUID `json:"user_id"`
	EncryptedPassword string        `json:"encrypted_password"`
}
